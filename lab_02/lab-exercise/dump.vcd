$date
	Sun Nov 13 01:44:03 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 32 ! result [31:0] $end
$var wire 1 " Zero $end
$var wire 1 # Verflow $end
$var wire 1 $ Negative $end
$var wire 1 % Carry $end
$var reg 32 & A [31:0] $end
$var reg 32 ' B [31:0] $end
$var reg 2 ( control [1:0] $end
$scope module dut $end
$var wire 32 ) A [31:0] $end
$var wire 32 * A_and_B [31:0] $end
$var wire 32 + A_or_B [31:0] $end
$var wire 1 , A_xnor_B_xnor_control $end
$var wire 1 - A_xor_sum $end
$var wire 32 . B [31:0] $end
$var wire 32 / B_not [31:0] $end
$var wire 1 % Carry $end
$var wire 1 # Verflow $end
$var wire 2 0 control [1:0] $end
$var wire 1 1 control_1_not $end
$var wire 32 2 result [31:0] $end
$var wire 1 " Zero $end
$var wire 32 3 S1 [31:0] $end
$var wire 1 $ Negative $end
$var wire 1 4 Cout $end
$var wire 32 5 A_sum_B [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1 5
14
b10000000000000000000000000000001 3
b1 2
11
b0 0
b1111111111111111111111111111110 /
b10000000000000000000000000000001 .
1-
1,
b10000000000000000000000000000001 +
b10000000000000000000000000000000 *
b10000000000000000000000000000000 )
b0 (
b10000000000000000000000000000001 '
b10000000000000000000000000000000 &
1%
0$
1#
0"
b1 !
$end
#100
1"
0$
0#
b0 !
b0 2
0,
1%
0-
b11111111111111111111111111010111 /
b11111111111111111111111111010111 3
b101000 +
b101000 *
b0 5
14
b101000 '
b101000 .
b101000 &
b101000 )
b1 (
b1 0
#200
1-
04
0,
0%
1"
b10101010101010101010101010101010 3
01
b0 !
b0 2
b1010101010101010101010101010101 /
b11111111111111111111111111111111 +
b0 *
b11111111111111111111111111111111 5
b10101010101010101010101010101010 '
b10101010101010101010101010101010 .
b1010101010101010101010101010101 &
b1010101010101010101010101010101 )
b10 (
b10 0
#300
0-
14
0$
0"
0,
b1110000000110000000000001111 !
b1110000000110000000000001111 2
b11111111111111001111111111110000 /
b11111111111111001111111111110000 3
b1110000000110000000000001111 +
b1 *
b1101111111001111111111110010 5
b110000000000001111 '
b110000000000001111 .
b1110000000000000000000000001 &
b1110000000000000000000000001 )
b11 (
b11 0
#400
